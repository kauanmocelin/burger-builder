{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.d0db7f50.chunk.js","sourcesContent":["import React from 'react'\n\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\n\nimport classes from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                btnType='Danger'\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button\n                btnType='Success'\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from '../../../components/UI/Button/Button'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport classes from './ContactData.module.css'\nimport axios from '../../../axios-orders'\nimport Input from '../../../components/UI/Input/Input'\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index'\nimport { updateObject, checkValidity } from '../../../shared/utility'\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ],\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault()\n\n        const formData = {}\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token)\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        })\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n\n        let formIsValid = true\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\n    }\n\n    render() {\n        const formElementsArray = []\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        )\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData'\n\nclass Checkout extends Component {\n    /*     state = {\n            ingredients: null,\n            price: 0\n        }\n        componentWillMount() {\n            const query = new URLSearchParams(this.props.location.search)\n            const ingredients = {}\n            let price = 0\n            for (let param of query.entries()) {\n                if (param[0] === 'price') {\n                    price = param[1]\n                } else {\n                    ingredients[param[0]] = +param[1]\n                }\n            }\n            this.setState({ ingredients: ingredients, totalPrice: price })\n        } */\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack()\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data')\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            )\n        }\n        return summary\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout)","import React from 'react'\n\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null\n    const inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label} >{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};"],"sourceRoot":""}